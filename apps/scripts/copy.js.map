{"version":3,"file":"copy.js","sourceRoot":"","sources":["copy.ts"],"names":[],"mappings":";;;;;;;;;AAAA,+BAA+B;AAE/B,OAAO,QAAqB,MAAM,UAAU,CAAC;AAE7C,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,aAAa,CAAC;AAC5C,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,MAAM,IAAI,GAAG,CAAO,UAAkB,EAAE,IAAY,EAAiB,EAAE;IACrE,IAAI;QACF,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;KACpD;IAAC,OAAO,CAAC,EAAE,GAAE;IAEd,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC;SACvB,IAAI,CAAC,GAAG,EAAE;QACT,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,iBAAiB,IAAI,EAAE,CAAC,CAAC;IACpD,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,GAAmC,EAAE,EAAE;QAC7C,IAAI,GAAG,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,iBAAiB,IAAI,EAAE,CAAC,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACxB;IACH,CAAC,CAAC,CAAC;AACP,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,KAA4B,EAC5B,KAAc,EACQ,EAAE;IACxB,IAAI,KAAK,EAAE;QACT,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,CAAO,IAAI,EAAE,EAAE;gBAC/B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzB,MAAM,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAChC,CAAC,CAAA,CAAC,CAAC;YACH,KAAK;gBACH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAO,IAAI,EAAE,EAAE,kDAAC,OAAA,MAAM,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA,GAAA,CAAC,CAAC;SACvE;QACD,OAAO,QAAQ,CAAC;KACjB;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAC/C,MAAM,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACvB;IACD,OAAO,EAAE,CAAC;AACZ,CAAC,CAAA,CAAC","sourcesContent":["/* eslint-disable no-console */\r\n\r\nimport chokidar, {FSWatcher} from 'chokidar';\r\nimport type {NoParamCallback} from 'fs';\r\nimport {copyFile, mkdir} from 'fs/promises';\r\nimport path from 'path';\r\n\r\nconst copy = async (sourcePath: string, dest: string): Promise<void> => {\r\n  try {\r\n    await mkdir(path.dirname(dest), {recursive: true});\r\n  } catch (_) {}\r\n\r\n  copyFile(sourcePath, dest)\r\n    .then(() => {\r\n      console.log(`${sourcePath} is copied to ${dest}`);\r\n    })\r\n    .catch((err: Parameters<NoParamCallback>[0]) => {\r\n      if (err) {\r\n        console.log(`${sourcePath} is copied to ${dest}`);\r\n        console.log(err.stack);\r\n      }\r\n    });\r\n};\r\n\r\nexport const copyFiles = async (\r\n  paths: {[s: string]: string},\r\n  watch: boolean\r\n): Promise<FSWatcher[]> => {\r\n  if (watch) {\r\n    const watchers = Object.keys(paths).map((s) => chokidar.watch(s));\r\n    console.log('path');\r\n    console.log(paths);\r\n    for (const watcher of watchers) {\r\n      watcher.on('add', async (path) => {\r\n        console.log('add');\r\n        console.log(path);\r\n        console.log(paths[path]);\r\n        await copy(path, paths[path]);\r\n      });\r\n      watch &&\r\n        watcher.on('change', async (path) => await copy(path, paths[path]));\r\n    }\r\n    return watchers;\r\n  }\r\n\r\n  for (const [src, dest] of Object.entries(paths)) {\r\n    await copy(src, dest);\r\n  }\r\n  return [];\r\n};\r\n"]}